/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _SDFS_H_RPCGEN
#define _SDFS_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif


struct read_req {
	char *path;
	int size;
	int offset;
};
typedef struct read_req read_req;

typedef read_req READ_REQ_T;

struct read_rsp {
	int err;
	int size;
	struct {
		u_int data_len;
		char *data_val;
	} data;
};
typedef struct read_rsp read_rsp;

typedef read_rsp READ_RSP_T;

struct write_req {
	char *path;
	int size;
	int offset;
	struct {
		u_int data_len;
		char *data_val;
	} data;
};
typedef struct write_req write_req;

typedef write_req WRITE_REQ_T;

struct write_rsp {
	int err;
	int size;
};
typedef struct write_rsp write_rsp;

typedef write_rsp WRITE_RSP_T;

struct getattr_req {
	char *path;
};
typedef struct getattr_req getattr_req;

typedef getattr_req GETATTR_REQ_T;

struct getattr_rsp {
	int err;
	u_long ino;
	u_int mode;
	u_int uid;
	u_int gid;
	u_int atime;
	u_int mtime;
	u_int ctime;
	u_int nlink;
	u_long size;
};
typedef struct getattr_rsp getattr_rsp;

typedef getattr_rsp GETATTR_RSP_T;

struct readdir_req {
	char *path;
	int size;
	int offset;
};
typedef struct readdir_req readdir_req;

typedef readdir_req READDIR_REQ_T;

struct readdir_rsp {
	int err;
	int size;
	struct {
		u_int data_len;
		char *data_val;
	} data;
};
typedef struct readdir_rsp readdir_rsp;

typedef readdir_rsp READDIR_RSP_T;

struct open_req {
	char *path;
	int flag;
};
typedef struct open_req open_req;

typedef open_req OPEN_REQ_T;

struct access_req {
	char *path;
	int mask;
};
typedef struct access_req access_req;

typedef access_req ACCESS_REQ_T;

struct readlink_req {
	char *path;
	int size;
};
typedef struct readlink_req readlink_req;

typedef readlink_req READLINK_REQ_T;

struct readlink_rsp {
	int err;
	struct {
		u_int data_len;
		char *data_val;
	} data;
};
typedef struct readlink_rsp readlink_rsp;

typedef readlink_rsp READLINK_RSP_T;

struct mknod_req {
	char *path;
	u_int mode;
	u_int dev;
};
typedef struct mknod_req mknod_req;

typedef mknod_req MKNOD_REQ_T;

struct mkdir_req {
	char *path;
	u_int mode;
};
typedef struct mkdir_req mkdir_req;

typedef mkdir_req MKDIR_REQ_T;

struct symlink_req {
	char *from;
	char *to;
};
typedef struct symlink_req symlink_req;

typedef symlink_req SYMLINK_REQ_T;

struct rename_req {
	char *from;
	char *to;
};
typedef struct rename_req rename_req;

typedef rename_req RENAME_REQ_T;

struct link_req {
	char *from;
	char *to;
};
typedef struct link_req link_req;

typedef link_req LINK_REQ_T;

struct chmod_req {
	char *path;
	u_int mode;
};
typedef struct chmod_req chmod_req;

typedef chmod_req CHMOD_REQ_T;

struct chown_req {
	char *path;
	u_int uid;
	u_int gid;
};
typedef struct chown_req chown_req;

typedef chown_req CHOWN_REQ_T;

struct truncate_req {
	char *path;
	u_int size;
};
typedef struct truncate_req truncate_req;

typedef truncate_req TRUNCATE_REQ_T;

struct statvfs_rsp {
	int err;
	u_long bsize;
	u_long frsize;
	u_long blocks;
	u_long bfree;
	u_long bavail;
	u_long files;
	u_long ffree;
	u_long favail;
	u_long fsid;
	u_long flag;
	u_long namemax;
	u_int spare[6];
};
typedef struct statvfs_rsp statvfs_rsp;

typedef statvfs_rsp STATVFS_RSP_T;

struct create_req {
	char *path;
	u_int flag;
	u_int mode;
};
typedef struct create_req create_req;

typedef create_req CREATE_REQ_T;

struct setxattr_req {
	char *path;
	char *name;
	struct {
		u_int value_len;
		char *value_val;
	} value;
	u_int flag;
};
typedef struct setxattr_req setxattr_req;

typedef setxattr_req SETXATTR_REQ_T;

struct getxattr_req {
	char *path;
	char *name;
	u_int size;
};
typedef struct getxattr_req getxattr_req;

typedef getxattr_req GETXATTR_REQ_T;

struct getxattr_rsp {
	int err;
	struct {
		u_int value_len;
		char *value_val;
	} value;
};
typedef struct getxattr_rsp getxattr_rsp;

typedef getxattr_rsp GETXATTR_RSP_T;

struct listxattr_req {
	char *path;
	u_int size;
};
typedef struct listxattr_req listxattr_req;

typedef listxattr_req LISTXATTR_REQ_T;

struct listxattr_rsp {
	int err;
	struct {
		u_int value_len;
		char *value_val;
	} value;
};
typedef struct listxattr_rsp listxattr_rsp;

typedef listxattr_rsp LISTXATTR_RSP_T;

struct removexattr_req {
	char *path;
	char *name;
};
typedef struct removexattr_req removexattr_req;

typedef removexattr_req REMOVEXATTR_REQ_T;

struct fallocate_req {
	char *path;
	u_int mode;
	u_int offset;
	u_int length;
};
typedef struct fallocate_req fallocate_req;

typedef fallocate_req FALLOCATE_REQ_T;

#define SDFS_PROG 0x00010000
#define SDFS_V1 0x0001

#if defined(__STDC__) || defined(__cplusplus)
#define rpc_read 1
extern  READ_RSP_T * rpc_read_0x0001(READ_REQ_T *, CLIENT *);
extern  READ_RSP_T * rpc_read_0x0001_svc(READ_REQ_T *, struct svc_req *);
#define rpc_write 2
extern  WRITE_RSP_T * rpc_write_0x0001(WRITE_REQ_T *, CLIENT *);
extern  WRITE_RSP_T * rpc_write_0x0001_svc(WRITE_REQ_T *, struct svc_req *);
#define rpc_open 3
extern  int * rpc_open_0x0001(OPEN_REQ_T *, CLIENT *);
extern  int * rpc_open_0x0001_svc(OPEN_REQ_T *, struct svc_req *);
#define rpc_create 4
extern  int * rpc_create_0x0001(CREATE_REQ_T *, CLIENT *);
extern  int * rpc_create_0x0001_svc(CREATE_REQ_T *, struct svc_req *);
#define rpc_getattr 10
extern  GETATTR_RSP_T * rpc_getattr_0x0001(GETATTR_REQ_T *, CLIENT *);
extern  GETATTR_RSP_T * rpc_getattr_0x0001_svc(GETATTR_REQ_T *, struct svc_req *);
#define rpc_readdir 11
extern  READDIR_RSP_T * rpc_readdir_0x0001(READDIR_REQ_T *, CLIENT *);
extern  READDIR_RSP_T * rpc_readdir_0x0001_svc(READDIR_REQ_T *, struct svc_req *);
#define rpc_access 20
extern  int * rpc_access_0x0001(ACCESS_REQ_T *, CLIENT *);
extern  int * rpc_access_0x0001_svc(ACCESS_REQ_T *, struct svc_req *);
#define rpc_mknod 21
extern  int * rpc_mknod_0x0001(MKNOD_REQ_T *, CLIENT *);
extern  int * rpc_mknod_0x0001_svc(MKNOD_REQ_T *, struct svc_req *);
#define rpc_mkdir 22
extern  int * rpc_mkdir_0x0001(MKDIR_REQ_T *, CLIENT *);
extern  int * rpc_mkdir_0x0001_svc(MKDIR_REQ_T *, struct svc_req *);
#define rpc_unlink 23
extern  int * rpc_unlink_0x0001(char **, CLIENT *);
extern  int * rpc_unlink_0x0001_svc(char **, struct svc_req *);
#define rpc_rmdir 24
extern  int * rpc_rmdir_0x0001(char **, CLIENT *);
extern  int * rpc_rmdir_0x0001_svc(char **, struct svc_req *);
#define rpc_symlink 25
extern  int * rpc_symlink_0x0001(SYMLINK_REQ_T *, CLIENT *);
extern  int * rpc_symlink_0x0001_svc(SYMLINK_REQ_T *, struct svc_req *);
#define rpc_rename 26
extern  int * rpc_rename_0x0001(RENAME_REQ_T *, CLIENT *);
extern  int * rpc_rename_0x0001_svc(RENAME_REQ_T *, struct svc_req *);
#define rpc_link 27
extern  int * rpc_link_0x0001(LINK_REQ_T *, CLIENT *);
extern  int * rpc_link_0x0001_svc(LINK_REQ_T *, struct svc_req *);
#define rpc_chmod 28
extern  int * rpc_chmod_0x0001(CHMOD_REQ_T *, CLIENT *);
extern  int * rpc_chmod_0x0001_svc(CHMOD_REQ_T *, struct svc_req *);
#define rpc_chown 29
extern  int * rpc_chown_0x0001(CHOWN_REQ_T *, CLIENT *);
extern  int * rpc_chown_0x0001_svc(CHOWN_REQ_T *, struct svc_req *);
#define rpc_truncate 30
extern  int * rpc_truncate_0x0001(TRUNCATE_REQ_T *, CLIENT *);
extern  int * rpc_truncate_0x0001_svc(TRUNCATE_REQ_T *, struct svc_req *);
#define rpc_readlink 41
extern  READLINK_RSP_T * rpc_readlink_0x0001(READLINK_REQ_T *, CLIENT *);
extern  READLINK_RSP_T * rpc_readlink_0x0001_svc(READLINK_REQ_T *, struct svc_req *);
#define rpc_statvfs 42
extern  STATVFS_RSP_T * rpc_statvfs_0x0001(char **, CLIENT *);
extern  STATVFS_RSP_T * rpc_statvfs_0x0001_svc(char **, struct svc_req *);
#define rpc_setxattr 43
extern  int * rpc_setxattr_0x0001(SETXATTR_REQ_T *, CLIENT *);
extern  int * rpc_setxattr_0x0001_svc(SETXATTR_REQ_T *, struct svc_req *);
#define rpc_getxattr 44
extern  GETXATTR_RSP_T * rpc_getxattr_0x0001(GETXATTR_REQ_T *, CLIENT *);
extern  GETXATTR_RSP_T * rpc_getxattr_0x0001_svc(GETXATTR_REQ_T *, struct svc_req *);
#define rpc_listxattr 45
extern  LISTXATTR_RSP_T * rpc_listxattr_0x0001(LISTXATTR_REQ_T *, CLIENT *);
extern  LISTXATTR_RSP_T * rpc_listxattr_0x0001_svc(LISTXATTR_REQ_T *, struct svc_req *);
#define rpc_removexattr 46
extern  int * rpc_removexattr_0x0001(REMOVEXATTR_REQ_T *, CLIENT *);
extern  int * rpc_removexattr_0x0001_svc(REMOVEXATTR_REQ_T *, struct svc_req *);
#define rpc_fallocate 47
extern  int * rpc_fallocate_0x0001(FALLOCATE_REQ_T *, CLIENT *);
extern  int * rpc_fallocate_0x0001_svc(FALLOCATE_REQ_T *, struct svc_req *);
extern int sdfs_prog_0x0001_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define rpc_read 1
extern  READ_RSP_T * rpc_read_0x0001();
extern  READ_RSP_T * rpc_read_0x0001_svc();
#define rpc_write 2
extern  WRITE_RSP_T * rpc_write_0x0001();
extern  WRITE_RSP_T * rpc_write_0x0001_svc();
#define rpc_open 3
extern  int * rpc_open_0x0001();
extern  int * rpc_open_0x0001_svc();
#define rpc_create 4
extern  int * rpc_create_0x0001();
extern  int * rpc_create_0x0001_svc();
#define rpc_getattr 10
extern  GETATTR_RSP_T * rpc_getattr_0x0001();
extern  GETATTR_RSP_T * rpc_getattr_0x0001_svc();
#define rpc_readdir 11
extern  READDIR_RSP_T * rpc_readdir_0x0001();
extern  READDIR_RSP_T * rpc_readdir_0x0001_svc();
#define rpc_access 20
extern  int * rpc_access_0x0001();
extern  int * rpc_access_0x0001_svc();
#define rpc_mknod 21
extern  int * rpc_mknod_0x0001();
extern  int * rpc_mknod_0x0001_svc();
#define rpc_mkdir 22
extern  int * rpc_mkdir_0x0001();
extern  int * rpc_mkdir_0x0001_svc();
#define rpc_unlink 23
extern  int * rpc_unlink_0x0001();
extern  int * rpc_unlink_0x0001_svc();
#define rpc_rmdir 24
extern  int * rpc_rmdir_0x0001();
extern  int * rpc_rmdir_0x0001_svc();
#define rpc_symlink 25
extern  int * rpc_symlink_0x0001();
extern  int * rpc_symlink_0x0001_svc();
#define rpc_rename 26
extern  int * rpc_rename_0x0001();
extern  int * rpc_rename_0x0001_svc();
#define rpc_link 27
extern  int * rpc_link_0x0001();
extern  int * rpc_link_0x0001_svc();
#define rpc_chmod 28
extern  int * rpc_chmod_0x0001();
extern  int * rpc_chmod_0x0001_svc();
#define rpc_chown 29
extern  int * rpc_chown_0x0001();
extern  int * rpc_chown_0x0001_svc();
#define rpc_truncate 30
extern  int * rpc_truncate_0x0001();
extern  int * rpc_truncate_0x0001_svc();
#define rpc_readlink 41
extern  READLINK_RSP_T * rpc_readlink_0x0001();
extern  READLINK_RSP_T * rpc_readlink_0x0001_svc();
#define rpc_statvfs 42
extern  STATVFS_RSP_T * rpc_statvfs_0x0001();
extern  STATVFS_RSP_T * rpc_statvfs_0x0001_svc();
#define rpc_setxattr 43
extern  int * rpc_setxattr_0x0001();
extern  int * rpc_setxattr_0x0001_svc();
#define rpc_getxattr 44
extern  GETXATTR_RSP_T * rpc_getxattr_0x0001();
extern  GETXATTR_RSP_T * rpc_getxattr_0x0001_svc();
#define rpc_listxattr 45
extern  LISTXATTR_RSP_T * rpc_listxattr_0x0001();
extern  LISTXATTR_RSP_T * rpc_listxattr_0x0001_svc();
#define rpc_removexattr 46
extern  int * rpc_removexattr_0x0001();
extern  int * rpc_removexattr_0x0001_svc();
#define rpc_fallocate 47
extern  int * rpc_fallocate_0x0001();
extern  int * rpc_fallocate_0x0001_svc();
extern int sdfs_prog_0x0001_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_read_req (XDR *, read_req*);
extern  bool_t xdr_READ_REQ_T (XDR *, READ_REQ_T*);
extern  bool_t xdr_read_rsp (XDR *, read_rsp*);
extern  bool_t xdr_READ_RSP_T (XDR *, READ_RSP_T*);
extern  bool_t xdr_write_req (XDR *, write_req*);
extern  bool_t xdr_WRITE_REQ_T (XDR *, WRITE_REQ_T*);
extern  bool_t xdr_write_rsp (XDR *, write_rsp*);
extern  bool_t xdr_WRITE_RSP_T (XDR *, WRITE_RSP_T*);
extern  bool_t xdr_getattr_req (XDR *, getattr_req*);
extern  bool_t xdr_GETATTR_REQ_T (XDR *, GETATTR_REQ_T*);
extern  bool_t xdr_getattr_rsp (XDR *, getattr_rsp*);
extern  bool_t xdr_GETATTR_RSP_T (XDR *, GETATTR_RSP_T*);
extern  bool_t xdr_readdir_req (XDR *, readdir_req*);
extern  bool_t xdr_READDIR_REQ_T (XDR *, READDIR_REQ_T*);
extern  bool_t xdr_readdir_rsp (XDR *, readdir_rsp*);
extern  bool_t xdr_READDIR_RSP_T (XDR *, READDIR_RSP_T*);
extern  bool_t xdr_open_req (XDR *, open_req*);
extern  bool_t xdr_OPEN_REQ_T (XDR *, OPEN_REQ_T*);
extern  bool_t xdr_access_req (XDR *, access_req*);
extern  bool_t xdr_ACCESS_REQ_T (XDR *, ACCESS_REQ_T*);
extern  bool_t xdr_readlink_req (XDR *, readlink_req*);
extern  bool_t xdr_READLINK_REQ_T (XDR *, READLINK_REQ_T*);
extern  bool_t xdr_readlink_rsp (XDR *, readlink_rsp*);
extern  bool_t xdr_READLINK_RSP_T (XDR *, READLINK_RSP_T*);
extern  bool_t xdr_mknod_req (XDR *, mknod_req*);
extern  bool_t xdr_MKNOD_REQ_T (XDR *, MKNOD_REQ_T*);
extern  bool_t xdr_mkdir_req (XDR *, mkdir_req*);
extern  bool_t xdr_MKDIR_REQ_T (XDR *, MKDIR_REQ_T*);
extern  bool_t xdr_symlink_req (XDR *, symlink_req*);
extern  bool_t xdr_SYMLINK_REQ_T (XDR *, SYMLINK_REQ_T*);
extern  bool_t xdr_rename_req (XDR *, rename_req*);
extern  bool_t xdr_RENAME_REQ_T (XDR *, RENAME_REQ_T*);
extern  bool_t xdr_link_req (XDR *, link_req*);
extern  bool_t xdr_LINK_REQ_T (XDR *, LINK_REQ_T*);
extern  bool_t xdr_chmod_req (XDR *, chmod_req*);
extern  bool_t xdr_CHMOD_REQ_T (XDR *, CHMOD_REQ_T*);
extern  bool_t xdr_chown_req (XDR *, chown_req*);
extern  bool_t xdr_CHOWN_REQ_T (XDR *, CHOWN_REQ_T*);
extern  bool_t xdr_truncate_req (XDR *, truncate_req*);
extern  bool_t xdr_TRUNCATE_REQ_T (XDR *, TRUNCATE_REQ_T*);
extern  bool_t xdr_statvfs_rsp (XDR *, statvfs_rsp*);
extern  bool_t xdr_STATVFS_RSP_T (XDR *, STATVFS_RSP_T*);
extern  bool_t xdr_create_req (XDR *, create_req*);
extern  bool_t xdr_CREATE_REQ_T (XDR *, CREATE_REQ_T*);
extern  bool_t xdr_setxattr_req (XDR *, setxattr_req*);
extern  bool_t xdr_SETXATTR_REQ_T (XDR *, SETXATTR_REQ_T*);
extern  bool_t xdr_getxattr_req (XDR *, getxattr_req*);
extern  bool_t xdr_GETXATTR_REQ_T (XDR *, GETXATTR_REQ_T*);
extern  bool_t xdr_getxattr_rsp (XDR *, getxattr_rsp*);
extern  bool_t xdr_GETXATTR_RSP_T (XDR *, GETXATTR_RSP_T*);
extern  bool_t xdr_listxattr_req (XDR *, listxattr_req*);
extern  bool_t xdr_LISTXATTR_REQ_T (XDR *, LISTXATTR_REQ_T*);
extern  bool_t xdr_listxattr_rsp (XDR *, listxattr_rsp*);
extern  bool_t xdr_LISTXATTR_RSP_T (XDR *, LISTXATTR_RSP_T*);
extern  bool_t xdr_removexattr_req (XDR *, removexattr_req*);
extern  bool_t xdr_REMOVEXATTR_REQ_T (XDR *, REMOVEXATTR_REQ_T*);
extern  bool_t xdr_fallocate_req (XDR *, fallocate_req*);
extern  bool_t xdr_FALLOCATE_REQ_T (XDR *, FALLOCATE_REQ_T*);

#else /* K&R C */
extern bool_t xdr_read_req ();
extern bool_t xdr_READ_REQ_T ();
extern bool_t xdr_read_rsp ();
extern bool_t xdr_READ_RSP_T ();
extern bool_t xdr_write_req ();
extern bool_t xdr_WRITE_REQ_T ();
extern bool_t xdr_write_rsp ();
extern bool_t xdr_WRITE_RSP_T ();
extern bool_t xdr_getattr_req ();
extern bool_t xdr_GETATTR_REQ_T ();
extern bool_t xdr_getattr_rsp ();
extern bool_t xdr_GETATTR_RSP_T ();
extern bool_t xdr_readdir_req ();
extern bool_t xdr_READDIR_REQ_T ();
extern bool_t xdr_readdir_rsp ();
extern bool_t xdr_READDIR_RSP_T ();
extern bool_t xdr_open_req ();
extern bool_t xdr_OPEN_REQ_T ();
extern bool_t xdr_access_req ();
extern bool_t xdr_ACCESS_REQ_T ();
extern bool_t xdr_readlink_req ();
extern bool_t xdr_READLINK_REQ_T ();
extern bool_t xdr_readlink_rsp ();
extern bool_t xdr_READLINK_RSP_T ();
extern bool_t xdr_mknod_req ();
extern bool_t xdr_MKNOD_REQ_T ();
extern bool_t xdr_mkdir_req ();
extern bool_t xdr_MKDIR_REQ_T ();
extern bool_t xdr_symlink_req ();
extern bool_t xdr_SYMLINK_REQ_T ();
extern bool_t xdr_rename_req ();
extern bool_t xdr_RENAME_REQ_T ();
extern bool_t xdr_link_req ();
extern bool_t xdr_LINK_REQ_T ();
extern bool_t xdr_chmod_req ();
extern bool_t xdr_CHMOD_REQ_T ();
extern bool_t xdr_chown_req ();
extern bool_t xdr_CHOWN_REQ_T ();
extern bool_t xdr_truncate_req ();
extern bool_t xdr_TRUNCATE_REQ_T ();
extern bool_t xdr_statvfs_rsp ();
extern bool_t xdr_STATVFS_RSP_T ();
extern bool_t xdr_create_req ();
extern bool_t xdr_CREATE_REQ_T ();
extern bool_t xdr_setxattr_req ();
extern bool_t xdr_SETXATTR_REQ_T ();
extern bool_t xdr_getxattr_req ();
extern bool_t xdr_GETXATTR_REQ_T ();
extern bool_t xdr_getxattr_rsp ();
extern bool_t xdr_GETXATTR_RSP_T ();
extern bool_t xdr_listxattr_req ();
extern bool_t xdr_LISTXATTR_REQ_T ();
extern bool_t xdr_listxattr_rsp ();
extern bool_t xdr_LISTXATTR_RSP_T ();
extern bool_t xdr_removexattr_req ();
extern bool_t xdr_REMOVEXATTR_REQ_T ();
extern bool_t xdr_fallocate_req ();
extern bool_t xdr_FALLOCATE_REQ_T ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_SDFS_H_RPCGEN */
